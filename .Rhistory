preProcess = c("center", "scale"),
tuneLength = 25,
trControl = control)
# Training ELastic Net Regression model
elastic_model <- train(Ingtot ~ .,
data = cbind(X, Y),
method = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl = control, na.action = na.exclude)
key <- read_excel("D:/noveno semestre/big data/BDML_ProblemSet2/data/recode_vals.xlsx") %>%
select(c("var_name"),contains("value")) %>%
filter(var_name %notin% "id")
install.packages("readxl")
library(readxl)
key <- read_excel("D:/noveno semestre/big data/BDML_ProblemSet2/data/recode_vals.xlsx") %>%
select(c("var_name"),contains("value")) %>%
filter(var_name %notin% "id")
# import the codebook
key <- read_excel("D:/noveno semestre/big data/BDML_ProblemSet2/data/recode_vals.xlsx") %>%
select(c("var_name"),contains("value")) %>%
filter(var_name %notin% "ID")
# import the codebook
key <- read_excel("D:/noveno semestre/big data/BDML_ProblemSet2/data/recode_vals.xlsx") %>%
select(c("var_name"),contains("value"))
vulist <- function(x){suppressWarnings(as.numeric(unlist(strsplit(as.character(x), split = ",")))) }
## split and unlist string (separated by commas) into a character vector with n elements
vlulist <- function(x){suppressWarnings(unlist(strsplit(as.character(x), split = ",")))}
# (rlang, tibble, and dplyr)
recode_the_vals <- function(x){
x_name <- quo_name(enquo(x))
key.sub <- key %>% filter(var_name %in% x_name)
label.keys <- tibble(values = vlulist(key.sub$values), labels = vlulist(key.sub$value.labels))
recode(x, !!!(deframe(label.keys)))
}
# recode values
train_personas %>%
mutate(across(.cols = -c(id), ~ recode_the_vals(.x)))
View(train_personas)
# create notin operator
`%notin%` <- Negate(`%in%`)
# Download packages if not available
pckgs <- c("tidyverse", "data.table", "rlang", "readxl")
if (any(pckgs %notin% rownames(installed.packages())==TRUE)){
install.packages(pckgs, repos = c(CRAN = "http://cloud.r-project.org"))}
# load packages
invisible(sapply(pckgs, FUN = require, character.only = TRUE))
# recode values
train_personas %>%
mutate(across(.cols = -c(id), ~ recode_the_vals(.x)))
View(key)
variables_cambio <- key[["var_name"]]
train_personas %>%
mutate(across(.cols = c(variables_cambio), ~ recode_the_vals(.x)))
train_personas %>%
mutate(across(.cols = variables_cambio, ~ recode_the_vals(.x)))
variables_cambio <- gsub('"','',as.character(variables_cambio))
# recode values
train_personas %>%
mutate(across(.cols = , ~ recode_the_vals(.x)))
View(train_personas)
# recode values
train_personas %>%
mutate(across(.cols = variables_cambio, ~ recode_the_vals(.x)))
View(train_hogares)
View(train_personas)
variables_cambio <- gsub('"','',as.character(variables_cambio))
variables_cambio <- gsub('"','',as.character(variables_cambio))
variables_cambio <- gsub('"','',as.character(variables_cambio))
variables_cambio <- gsub('"','',as.character(variables_cambio))
# recode values
train_personas %>%
mutate(across(.cols = c(p020,p050), ~ recode_the_vals(.x)))
# recode values
train_personas %>%
mutate(across(.cols = c(p6020,p6050), ~ recode_the_vals(.x)))
# recode values
train_personas %>%
mutate(across(.cols = c(p6020), ~ recode_the_vals(.x)))
View(train_personas)
# recode values
train_personas %>%
mutate(across(.cols = c("p6020"), ~ recode_the_vals(.x)))
key <- read_excel("D:/noveno semestre/big data/BDML_ProblemSet2/data/recode_vals.xlsx") %>%
select(c("var_name"),contains("value"))
variables_cambio <- key[["var_name"]]
variables_cambio <- gsub('"','',as.character(variables_cambio))
## Functions
## split and unlist character values (separated by commas) into a numeric vector with n elements
vulist <- function(x){suppressWarnings(as.numeric(unlist(strsplit(as.character(x), split = ",")))) }
## split and unlist string (separated by commas) into a character vector with n elements
vlulist <- function(x){suppressWarnings(unlist(strsplit(as.character(x), split = ",")))}
## Option 5: recode values function (deframe)
# (rlang, tibble, and dplyr)
recode_the_vals <- function(x){
x_name <- quo_name(enquo(x))
key.sub <- key %>% filter(var_name %in% x_name)
label.keys <- tibble(values = vlulist(key.sub$values), labels = vlulist(key.sub$value.labels))
recode(x, !!!(deframe(label.keys)))
}
# recode values
train_personas %>%
mutate(across(.cols = variables_cambio, ~ recode_the_vals(.x)))
library(haven)
train_personas = haven::as_factor(train_personas)
class(train_personas)
View(train_personas)
class(train_personas$P6050)
# recode values
train_personas %>%
mutate(across(.cols = variables_cambio, ~ recode_the_vals(.x)))
View(train_personas)
X1=datosgeih[,variables_cambio]
X1=train_personas[,variables_cambio]
View(X1)
View(train_personas)
# tras hacer la recodificacion se seleccionan las variables mas relevantes:
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina")]
y2= train_personas[,"ingtot"]
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina")]
y2= train_personas[,"Ingtot"]
train_personas =cbind(y1,y2,X1)
# tras hacer la recodificacion se seleccionan las variables mas relevantes:
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina")]
y1= train_personas[,"Ingtot"]
train_personas =cbind(y1,X2,X1)
train_personas= data.frame(train_personas)
View(train_personas)
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
# tras hacer la recodificacion se seleccionan las variables mas relevantes:
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina")]
Ingtot= train_personas[,"Ingtot"]
train_hogares<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/train_hogares.Rds"))
train_personas<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/train_personas.Rds"))
test_hogares<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/test_hogares.Rds"))
test_personas<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/test_personas.Rds"))
## creando el subset de las variables:
colnames_hogares_test <- colnames(test_hogares)
pobre_hogares = train_hogares[,c("Pobre")]
ingreso_hogares = train_hogares[,c("Ingpcug")]
train_hogares = train_hogares[,colnames_hogares_test]
train_hogares =cbind(train_hogares,ingreso_hogares,pobre_hogares)
train_hogares= data.frame(train_hogares)
### limpiar la de personas
colnames_personas_test <- colnames(test_personas)
ingreso_personas = train_personas[,c("Ingtot")]
train_personas= train_personas[,colnames_personas_test]
train_personas=cbind(train_personas,ingreso_personas)
train_personas= data.frame(train_personas)
train_personas = haven::as_factor(train_personas)
# tras hacer la recodificacion se seleccionan las variables mas relevantes:
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina")]
Ingtot= train_personas[,"Ingtot"]
train_personas =cbind(y1,X2,X1)
train_personas= data.frame(train_personas)
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
colSums(is.na(train_personas))
View(train_personas)
train_personas <- train_personas %>% mutate_at(vars("Ingtot"), ~replace_na(.,0))
# tras hacer la recodificacion se seleccionan las variables mas relevantes:
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina", "Dpto")]
## leyendo los datos
train_hogares<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/train_hogares.Rds"))
train_personas<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/train_personas.Rds"))
test_hogares<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/test_hogares.Rds"))
test_personas<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/test_personas.Rds"))
## creando el subset de las variables:
colnames_hogares_test <- colnames(test_hogares)
pobre_hogares = train_hogares[,c("Pobre")]
ingreso_hogares = train_hogares[,c("Ingpcug")]
train_hogares = train_hogares[,colnames_hogares_test]
train_hogares =cbind(train_hogares,ingreso_hogares,pobre_hogares)
train_hogares= data.frame(train_hogares)
### limpiar la de personas
colnames_personas_test <- colnames(test_personas)
ingreso_personas = train_personas[,c("Ingtot")]
train_personas= train_personas[,colnames_personas_test]
train_personas=cbind(train_personas,ingreso_personas)
train_personas= data.frame(train_personas)
train_personas = haven::as_factor(train_personas)
# tras hacer la recodificacion se seleccionan las variables mas relevantes:
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina", "Dpto")]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina", "Dpto")]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina", "Depto")]
Ingtot= train_personas[,"Ingtot"]
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
train_personas <- train_personas %>% mutate_at(vars("Ingtot"), ~replace_na(.,0))
variables_chr <- names(select_if(train_personas, is.character))
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
variables_factor <- names(select_if(train_personas, is.factor))
for (v in variables_factor) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
train_personas <- data.frame(train_personas[, !names(train_personas) %in% v],model.matrix(~ v-1,train_personas))
}
for (v in variables_factor) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
train_personas <- data.frame(train_personas[, !names(train_personas) %in% "v"],model.matrix(~ v-1,train_personas))
}
skim(train_personas)
skims(train_personas)
skim(train_personas)
for (v in variables_factor) {
train_personas <- train_personas %>% mutate_at(vars(v), ~replace_na(.,0))
train_personas <- data.frame(train_personas[, !names(train_personas) %in% v],model.matrix(~ v-1,train_personas))
}
View(train_personas)
variables_factor <- names(select_if(train_personas, is.factor))
for (v in variables_factor) {
train_personas <- train_personas %>% mutate_at(vars("all_of(v)"), ~replace_na(.,0))
train_personas <- data.frame(train_personas[, !names(train_personas) %in% "all_of(v)"],model.matrix(~ v-1,train_personas))
}
variables_factor <- names(select_if(train_personas, is.factor))
for (v in variables_factor) {
train_personas <- train_personas %>% mutate_at(vars(all_of(v)), ~replace_na(.,0))
train_personas <- data.frame(train_personas[, !names(train_personas) %in% all_of(v)],model.matrix(~ v-1,train_personas))
}
train_personas_dummy =train_personas[,variables_factor]
train_personas_dummy <- model.matrix(~. , train_personas_dummy) %>%
as.data.frame()
variables_factor <- names(select_if(train_personas, is.factor))
for (v in variables_factor) {
train_personas <- train_personas %>% mutate_at(vars(paste("'",v,"'")), ~replace_na(.,0))
}
for (v in variables_factor) {
train_personas <- train_personas %>% mutate_at(vars(paste("",v,"")), ~replace_na(.,0))
}
variables_factor <- names(select_if(train_personas, is.factor))
for (v in variables_factor) {
train_personas <- train_personas %>% mutate_at(vars(v), ~replace_na(.,0))
}
variables_factor <- names(select_if(train_personas, is.factor))
for (v in variables_factor) {
train_personas[, v] <- as.character(train_personas[, v, drop = T])
train_personas <- train_personas %>% mutate_at(vars(v), ~replace_na(.,0))
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
variables_factor <- names(select_if(train_personas, is.factor))
texto = ""
for (v in variables_factor) {
texto= texto+v
}
train_personas<-as.matrix(train_personas)
train_personas[is.na(train_personas)] <- "0"
train_personas<-as.data.frame(train_personas)
View(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
for (v in asignar_no_col) {
train_personas[is.na(train_personas$v)] <- "0"
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[is.na(train_personas$v)] <- "0"
}
for (v in asignar_no_col) {
train_personas[is.na(train_personas[,v])] <- "0"
}
for (v in asignar_no_col) {
train_personas[is.na(train_personas[v])] <- "0"
}
train_personas<-as.data.frame(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[is.na(train_personas[v])] <- "No"
}
train_personas<-as.data.frame(train_personas)
View(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[v]=train_personas[is.na(train_personas[v])] <- "No"
}
train_personas<-as.data.frame(train_personas)
train_personas<-as.data.frame(train_personas)
View(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[,v]=train_personas[is.na(train_personas[v])] <- "No"
}
View(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[,v] = train_personas[is.na(train_personas[,v])] <- "No"
}
train_personas<-as.data.frame(train_personas)
View(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[,v] = train_personas[is.na(train_personas[,v])] <- "No"
}
View(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
View(train_personas)
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[,v] = train_personas[is.na(train_personas[,v])] <- "No"
}
View(train_personas)
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
train_personas<-as.matrix(train_personas)
for (v in asignar_no_col) {
train_personas[v] = train_personas[is.na(train_personas[,v])] <- "No"
}
rm(ingreso_hogares, ingreso_personas, pobre, pobre_hogares, X, X_hogares,X_ingreso_hogares,X_personas,X_pobre_hogares)
Ingtot= train_personas[,"Ingtot"]
train_hogares<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/train_hogares.Rds"))
train_personas<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/train_personas.Rds"))
test_hogares<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/test_hogares.Rds"))
test_personas<-readRDS(here("D:/noveno semestre/big data/BDML_ProblemSet2/data/test_personas.Rds"))
## creando el subset de las variables:
colnames_hogares_test <- colnames(test_hogares)
pobre_hogares = train_hogares[,c("Pobre")]
ingreso_hogares = train_hogares[,c("Ingpcug")]
train_hogares = train_hogares[,colnames_hogares_test]
train_hogares =cbind(train_hogares,ingreso_hogares,pobre_hogares)
train_hogares= data.frame(train_hogares)
### limpiar la de personas
colnames_personas_test <- colnames(test_personas)
ingreso_personas = train_personas[,c("Ingtot")]
train_personas= train_personas[,colnames_personas_test]
train_personas=cbind(train_personas,ingreso_personas)
train_personas= data.frame(train_personas)
train_personas = haven::as_factor(train_personas)
X1=train_personas[,variables_cambio]
X2= train_personas[,c("id","P6040","Orden","Clase","Dominio","P6040","P6430","P6800","P6870","Pet","Oc","Des","Ina", "Depto")]
Ingtot= train_personas[,"Ingtot"]
train_personas =cbind(Ingtot,X2,X1)
train_personas= data.frame(train_personas)
#### encontrando el numero de missings
# ver los missing values
is.na(train_personas)
colSums(is.na(train_personas))
## reemplazar categoricas
variables_categoricas <- c("Depto", "Dominio")
for (v in variables_categoricas) {
train_personas[, v] <- as.factor(train_personas[, v, drop = T])
}
train_personas <- train_personas %>% mutate_at(vars("Ingtot"), ~replace_na(.,0))
View(train_personas)
asignar_no_col <- c("P6510", "P545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
for (i in asignar_no_col) {
train_personas[,i] <- as.character(train_personas[,i])
train_personas[which(is.na(train_personas[,i])==TRUE),i] <- "No"
train_personas[,i] <- as.factor(as.numeric(train_personas[,i]))
}
View(train_personas)
asignar_no_col <- c("P6510", "P6545", "P6580", "P6590", "P6610","P7040","P7090","P7110", "P7495", "P7510S3", "P7510S5")
variables_factor <- names(select_if(train_personas, is.factor))
for (i in asignar_no_col) {
train_personas[,i] <- as.character(train_personas[,i])
train_personas[which(is.na(train_personas[,i])==TRUE),i] <- "No"
train_personas[,i] <- as.factor(as.numeric(train_personas[,i]))
}
View(train_personas)
for (i in asignar_no_col) {
train_personas$i[is.na(train_personas$i)] <- "No"
}
View(train_personas)
for (i in asignar_no_col) {
train_personas$i[is.na(train_personas$i)] <- "No"
print(i)
}
for (i in asignar_no_col) {
i <- gsub('"','',i)
train_personas$i[is.na(train_personas$i)] <- "No"
print(i)
}
for (i in asignar_no_col) {
i <- substr('"','',i)
train_personas$i[is.na(train_personas$i)] <- "No"
print(i)
}
for (i in asignar_no_col) {
i <- chartr('"','',i)
train_personas$i[is.na(train_personas$i)] <- "No"
print(i)
}
for (i in asignar_no_col) {
x=i
train_personas$x[is.na(train_personas$x)] <- "No"
print(x)
}
View(train_personas)
for (i in asignar_no_col) {
i <- gsub('[^[:alnum:] ]', '', my_string)
train_personas$x[is.na(train_personas$x)] <- "No"
}
for (i in asignar_no_col) {
i <- gsub('[^[:alnum:] ]', '', i)
train_personas$i[is.na(train_personas$i)] <- "No"
}
